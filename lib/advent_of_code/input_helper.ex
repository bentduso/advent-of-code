defmodule AdventOfCode.InputHelper do
  @moduledoc """
  This module contains helper functions for reading and parsing input
  files from Advent of Code puzzles.
  """

  @doc """
  Returns the binary contents of the text file for the specified Advent of
  Code puzzle year and day, or raises a `File.Error` exception if an error occurs.

  The text file is expected to be located in the `priv/inputs` directory, typically
  generated by running the `mix aoc.gen` task.
  """
  @spec read_input!(pos_integer(), pos_integer()) :: binary()
  def read_input!(year, day) do
    day_padded = String.pad_leading(to_string(day), 2, "0")

    Path.join([
      :code.priv_dir(Application.get_application(__MODULE__)),
      "inputs",
      "Y#{year}",
      "day#{day_padded}.txt"
    ])
    |> File.read!()
  end

  @doc ~S"""
  Splits a UTF-8 encoded binary input into a list of strings, removing empty lines.

  ## Examples

      iex> AdventOfCode.InputHelper.as_lines("1000\n2000\n\n4000\n5000\n")
      ["1000", "2000", "4000", "5000"]

      iex> AdventOfCode.InputHelper.as_lines("up\nup\nleft\nright\ndown\n")
      ["up", "up", "left", "right", "down"]
  """
  @spec as_lines(binary()) :: [String.t()]
  def as_lines(input) when is_binary(input), do: String.split(input, "\n", trim: true)

  @doc ~S"""
  Converts a UTF-8 encoded binary input into a list of integers.

  ## Examples

      iex> AdventOfCode.InputHelper.as_integers("199\n200\n208\n210\n200\n207")
      [199, 200, 208, 210, 200, 207]

      iex> AdventOfCode.InputHelper.as_integers("-2\n-1\n0\n1\n2\n3")
      [-2, -1, 0, 1, 2, 3]
  """
  @spec as_integers(binary()) :: [integer()]
  def as_integers(input) when is_binary(input) do
    input
    |> as_lines()
    |> Enum.map(&String.to_integer/1)
  end

  @doc ~S"""
  Converts a UTF-8 encoded binary input into a list of floats.

  ## Examples

      iex> AdventOfCode.InputHelper.as_floats("1.5\n2.3\n4.7")
      [1.5, 2.3, 4.7]

      iex> AdventOfCode.InputHelper.as_floats("-1.5\n0.0\n3.14\n2.71")
      [-1.5, 0.0, 3.14, 2.71]
  """
  @spec as_floats(binary()) :: [float()]
  def as_floats(input) when is_binary(input) do
    input
    |> as_lines()
    |> Enum.map(&String.to_float/1)
  end

  @doc ~S"""
  Converts a UTF-8 encoded binary input into a grid of characters, represented as a
  list of charlists, where each charlist is a row in the grid.

  ## Examples

      iex> AdventOfCode.InputHelper.as_grid("..##.\n#...#\n.#.#.\n..#..")
      [~c"..##.", ~c"#...#", ~c".#.#.", ~c"..#.."]

      iex> AdventOfCode.InputHelper.as_grid("12345\n67890\nABCDE\nFGHIJ")
      [~c"12345", ~c"67890", ~c"ABCDE", ~c"FGHIJ"]

  """
  @spec as_grid(binary()) :: [charlist()]
  def as_grid(input) when is_binary(input) do
    input
    |> as_lines()
    |> Enum.map(&String.to_charlist/1)
  end
end
